#DEPENDENCIES
sample = glob_wildcards('../DatasetCreation/SRAfiles/fastq/{folder}/{sample}.sra_1.fastq')[0]

rule all:
	input:
		expand('../minimap_out/{sample}/{sample}_sr1.flagstats', sample = sample),
		expand('../busco_out/{sample}_busco', sample = sample),
		expand('../g_size/respect/{sample}_respect/estimated-parameters.txt', sample = sample)

# TRIMMOMATIC

'''
Trimmomatic is a tool for read trimming in Illumina NGS generated data.
Rule one uses this bioinformatic tool in order to trim the reads of the SRR files downloaded.
Command line usage:
 - PE (paired-end data)
 - Adapters path
 - LEADING -> remove leading low quality or N bases (below quality 20)
 - TRAILING -> remove trailing low quality or N bases (below quality 20)
 - SLIDINGWINDOW -> scan the read with a 5-base wide sliding window, cut when the average quality per base drops below 20
 - MINLEN -> drop reads below the 95 bases long
'''

rule trimmomatic:
	input:
		Reads1 = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.sra_1.fastq',
		Reads2 = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.sra_2.fastq'
	output:
		l_P = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.trimmed_1P.fq',
		r_P = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.trimmed_2P.fq',
		l_U = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.trimmed_1U.fq',
		r_U = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.trimmed_2U.fq'
	threads: 4
	log:
		'../logs/trimmomatic/trimmomatic_{sample}.log'
	shell:
		'(trimmomatic PE {input.Reads1} {input.Reads2} {output.l_P} {output.l_U} {output.r_P} {output.r_U} -threads {threads} '
		'ILLUMINACLIP:../../miniconda3/envs/snakemake/share/trimmomatic/adapters/TruSeq3-PE.fa:2:30:10:2:TRUE '
		'LEADING:20 TRAILING:20 SLIDINGWINDOW:5:20 MINLEN:95) 2> {log}'

# SPADES

'''
SPAdes is a genome assembler tool.
It takes as input the two files of paired end reads. 
Using k-mers it outputs contigs.fasta and scaffold.fasta.
--isolate is recommended for multi-cell organisms.
'''

rule spades:
	input:
		l = rules.trimmomatic.output.l_P,
		r = rules.trimmomatic.output.r_P
	params:
		s = '../assemblies/{sample}_spades'
	output:
		contigs = '../assemblies/{sample}_spades/contigs.fasta'
	threads: 8
	log:
		'../logs/spades/spades_{sample}.log'
	shell:	
		'(spades.py -1 {input.l} -2 {input.r} --isolate -o {params.s} -t {threads} --memory 400) 2> {log}'



# MITOZ

'''
MitoZ provides a "one-click" solution to get annotated mitogenomes from raw data fastq files.
-findmitoscaf searches for mitochondrial sequences from input fasta file.
'''

rule mitoz:
	input:
		cont = rules.spades.output.contigs
	params:
		mitoz_out = '{sample}_mitoscaf'		
	output:
		result = '../mitoz_outputs/{sample}_mitoscaf.result/{sample}_mitoscaf.mitogenome.fa'
	threads: 4
	conda: 'mitoz'
	log:
		'../logs/mitoz/mitoz_{sample}.log'
	shell:
		'(mitoz findmitoscaf --fastafile {input.cont} --clade Arthropoda --outprefix {params.mitoz_out}  --requiring_taxa Arthropoda --min_abundance 0 --thread_number {threads}; mv {params.mitoz_out}.result ../mitoz_outputs; rm {params.mitoz_out}*) 2> {log}'


# FCS-GX
'''
FCS, a quality assurance process used to make data suitable for submission.
FCS-GX is a sub-part of FCS searches for sequences from a wide range of organisms including bacteria, fungi, protists, viruses, 
and others to identify sequences that donâ€™t look like they are from the intended organism.
'''
rule fcs:
	input:
		f = rules.spades.output.contigs
	params:
		report = '../gx_out/{sample}_fcsgx_out'
	output:
		contam = '../gx_out/{sample}_fcsgx_out/contam.fasta'
	threads: 8
	log:
		'../logs/fcs/fcs_{sample}.log'
	shell:
		'(python3 ../fcs.py screen genome --fasta {input.f} --out-dir {params.report}/ --gx-db ../../../../../DATABIG/dbs/gxdb --tax-id 72766; '
		'cat {input.f} | python3 ../fcs.py clean genome --action-report {params.report}/contigs.72766.fcs_gx_report.txt --output {params.report}/clean.fasta --contam-fasta-out {output.contam}) 2> {log}'


# MERGING CONTAMINANTS
rule merge:
	input:
		mito = rules.mitoz.output.result,
		contaminant = rules.fcs.output.contam
	output:
		ToRemove = '../ToRemove/{sample}_ToRemove.fasta'
	shell:
		'touch {output.ToRemove}; cat {input.mito} >> {output.ToRemove}; cat {input.contaminant} >> {output.ToRemove}'

# OBTAIN CLEAN ASSEMBLIES
rule clean:
	input:
		all_c = rules.spades.output.contigs,
		rm_c = rules.merge.output.ToRemove
	output:
		clean_c = '../clean_assemblies/{sample}_output_clean.fasta'
	conda: 'base'
	shell:
		'python3 clean_contigs_snake.py {input.all_c} {input.rm_c}'

# MINIMAP2
rule minimap:
	input:
		g  = rules.clean.output.clean_c,
		reads1 = rules.trimmomatic.output.l_P,
		reads2 = rules.trimmomatic.output.r_P
	output:
		bam = '../minimap_out/{sample}/{sample}_sr.bam',
	threads:
		10
	log:
		'../logs/minimap2/minimap2_{sample}.log'
	shell:
		'(minimap2 -t {threads} -ax sr {input.g} {input.reads1} {input.reads2} | samtools view -Sb  > {output.bam}) 2> {log}'	
# SAMTOOLS

rule samtools_sorted_bam:
	input:
		b = rules.minimap.output.bam
	output:
		sorted = '../minimap_out/{sample}/{sample}_sr.sorted.bam',
		index = '../minimap_out/{sample}/{sample}_sr.sorted.bam.bai'
	shell:
		'samtools sort -@10 -o {output.sorted} {input.b}; '
		'rm {input.b}; '
		'samtools index {output.sorted}'
		
rule samtools_fastq:
	input:
		s_bam = rules.samtools_sorted_bam.output.sorted
	output:
		fastq1 = '../minimap_out/{sample}/{sample}.clean_1.fastq',
		fastq2 = '../minimap_out/{sample}/{sample}.clean_2.fastq'
	shell:
		'samtools fastq -f 2 -@ 10 {input.s_bam} -1 {output.fastq1} -2 {output.fastq2}'

rule samtools_flagstat:
	input:
		fq1 = rules.samtools_fastq.output.fastq1,
		fq2 = rules.samtools_fastq.output.fastq2
	output:
		flag1 = '../minimap_out/{sample}/{sample}_sr1.flagstats',
		flag2 = '../minimap_out/{sample}/{sample}_sr2.flagstats'
	shell:
		'samtools flagstat {input.fq1} > {output.flag1}; '
		'samtools flagstat {input.fq2} > {output.flag2}'


# BUSCO 

rule busco:
	input:
		clean_f = rules.clean.output.clean_c 
	output:
		directory('../busco_out/{sample}_busco')
	params:
		bout_fold = '../busco_out/{sample}_busco'
	conda: 'BuscO'
	threads: 4
	log:
		'../logs/busco/busco_{sample}.log'
	shell:
		'(busco -i {input.clean_f} -o {params.bout_fold} --mode genome -c {threads} -l metazoa_odb10) 2> {log}'	

# GENOME SIZE

rule respect:
	input:
		i1 = rules.samtools_fastq.output.fastq1,
		i2 = rules.samtools_fastq.output.fastq2
	output:
		respect_out = '../g_size/respect/{sample}_respect/estimated-parameters.txt'
	params:
		rout_fold = '../g_size/respect/{sample}_respect'
	conda: 'respect'
	threads: 4
	shell:
		'respect -i {input.i1} {input.i2} -o {params.rout_fold} --debug --threads {threads}'
