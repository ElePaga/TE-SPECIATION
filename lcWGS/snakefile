#DEPENDENCIES
sample = glob_wildcards('../DatasetCreation/SRAfiles/fastq/{folder}/{sample}.sra_1.fastq')[0]

rule all:
	input: expand('{sample}_mitoscaf', sample = sample)



# TRIMMOMATIC

'''
Trimmomatic is a tool for read trimming in Illumina NGS generated data.
Rule one uses this bioinformatic tool in order to trim the reads of the SRR files downloaded.
Command line usage:
 - PE (paired-end data)
 - Adapters path
 - LEADING -> remove leading low quality or N bases (below quality 20)
 - TRAILING -> remove trailing low quality or N bases (below quality 20)
 - SLIDINGWINDOW -> scan the read with a 5-base wide sliding window, cut when the average quality per base drops below 20
 - MINLEN -> drop reads below the 95 bases long
'''

rule one:
	input:
		Reads1 = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.sra_1.fastq',
		Reads2 = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.sra_2.fastq'
	output:
		l_P = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.trimmed_1P.fq',
		r_P = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.trimmed_2P.fq',
		l_U = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.trimmed_1U.fq',
		r_U = '../DatasetCreation/SRAfiles/fastq/{sample}/{sample}.trimmed_2U.fq'
	threads: 2
#	conda: '../../miniconda3/envs/snakemake'
	shell:
		'trimmomatic PE {input.Reads1} {input.Reads2} {output.l_P} {output.l_U} {output.r_P} {output.r_U} -threads {threads} '
		'ILLUMINACLIP:../../miniconda3/envs/snakemake/share/trimmomatic/adapters/TruSeq3-PE.fa:2:30:10:2:TRUE '
		'LEADING:20 TRAILING:20 SLIDINGWINDOW:5:20 MINLEN:95'

# SPADES

'''
SPAdes is a genome assembler tool.
It takes as input the two files of paired end reads. 
Using k-mers it outputs contigs.fasta and scaffold.fasta.
--isolate is recommended for multi-cell organisms.
'''

rule two:
	input:
		l = rules.one.output.l_P,
		r = rules.one.output.r_P
	output:
		assembly_folder = '../assemblies/{sample}_spades'
	threads: 2
#	conda: '../../miniconda3/envs/snakemake'
	shell:	
		'spades.py -1 {input.l} -2 {input.r} --isolate -o {output.assembly_folder} -t {threads} --memory 20'


# MITOZ
rule three:
	input:
		contigs = rules.two.output.assembly_folder
		
	output:
		mitoz_out = '{sample}_mitoscaf'
	threads: 2
	conda: 'mitoz'
	shell:
		'mitoz findmitoscaf --fastafile {input.contigs}/contigs.fasta --clade Arthropoda --outprefix {output.mitoz_out}  --requiring_taxa Arthropoda --min_abundance 0 --thread_number {threads}; mv {output.mitoz_out}.result ../mitoz_outputs; rm {output.mitoz_out}*'

'''
# FCS-GX
rule four:
	input:
		f = rules.two.output.assembly_folder
	output:
		report = '{sample}_fcsgx_out'
	threads: 2
#	conda: 'fcsgx'
	shell:
#		'python3 ../fcs.py screen genome --fasta {input.f}/contigs.fasta --out-dir ../gx_out/{output.report}/ --gx-db ../../../../../DATABIG/dbs/gxdb --tax-id 72766; '
		'cat {input.f}/contigs.fasta | python3 ../fcs.py clean genome --action-report ../gx_out/{output.report}/contigs.72766.fcs_gx_report.txt --output ../gx_out/{output.report}/clean.fasta --contam-fasta-out ../gx_out/{output.report}/contam.fasta'


#BOWTIE2
rule five:
'''
'''
#BOWTIE2
rule five_a:
	input:
		mitogenome = rules.four_b.output.mitoz_correct
	output:
		candidate = '{sample}_mtcandidate'
	threads: 2
#	conda: '../../miniconda3/envs/snakemake'
	shell:
		'bowtie2-build {input.mitogenome} {output.candidate}'

rule five_b:
	input:
		l = rules.one.output.l_P,
                r = rules.one.output.r_P,
		mtcandidate = rules.five_a.output.candidate
	output:
		?
	threads: 2
	conda: '../../miniconda3/envs/snakemake'
	shell:
		'bowtie2 -x {input.mtcandidate} -1 {input.l} -2 {input.r} --un-conc mtless -p {threads}'
'''

